-- Create Customers Table
CREATE TABLE Customers (
    customer_id SERIAL PRIMARY KEY,
    customer_name VARCHAR(255),
    phone_number VARCHAR(20)
);

-- Create Sales Table
CREATE TABLE Sales (
    sale_id SERIAL PRIMARY KEY,
    product_name VARCHAR(255),
    quantity_sold INT,
    unit_price DECIMAL(10, 2),
    product_category VARCHAR(50),
    customer_id INT,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

-- Insert records into Customers Table
INSERT INTO Customers (customer_name, phone_number)
VALUES
    ('John Doe', '123-456-7890'),
    ('Jane Smith', '098-765-4321'),
    ('Michael Brown', '(555) 555-5555'),
    ('Alice Garcia', '+44 20 7946 0123'),
    ('David Johnson', '1 (800) 555-1212'),
    ('Emily Williams', '678-234-9012'),
    ('Charles Miller', '212-567-8901');

-- Truncate all records from Sales Table
TRUNCATE TABLE Sales RESTART IDENTITY;

-- Insert 30 records into Sales Table
INSERT INTO Sales (product_name, quantity_sold, unit_price, product_category, customer_id)
VALUES 
    ('T-Shirt', 2, 19.99, 'Clothing', 1),
    ('Laptop', 1, 799.99, 'Electronics', 2),
    ('Coffee Mug', 4, 8.99, 'Kitchenware', 3),
    ('Wireless Headphones', 1, 129.99, 'Electronics', 4),
    ('Notebook', 5, 5.99, 'Office Supplies', 2),
    ('Plant', 1, 14.99, 'Home Decor', 5),
    ('Board Game', 2, 29.99, 'Entertainment', 1),
    ('Water Bottle', 3, 12.99, 'Kitchenware', 6),
    ('Smartphone Case', 2, 19.99, 'Accessories', 4),
    ('Desk Lamp', 1, 39.99, 'Office Supplies', 3),
    ('Fitness Tracker', 1, 74.99, 'Electronics', 7),
    ('Candle', 2, 14.99, 'Home Decor', 5),
    ('Backpack', 1, 49.99, 'Luggage', 6),
    ('Mousepad', 1, 7.99, 'Office Supplies', 2),
    ('Sunglasses', 1, 24.99, 'Accessories', 1),
    (16, 'Laptop', 10, 1200.00, 'Electronics', 1),
    (17, 'T-shirt', 50, 20.00, 'Clothing', 2),
    (18, 'Shampoo', 100, 8.50, 'Personal Care', 3),
    (19, 'Smartphone', 30, 800.00, 'Electronics', 4),
    (20, 'Jeans', 40, 35.00, 'Clothing', 5),
    (21, 'Soap', 200, 2.50, 'Personal Care', 6),
    (22, 'Blender', 15, 75.00, 'Home and Kitchen', 7),
    (23, 'Sneakers', 25, 50.00, 'Clothing', 1),
    (24, 'Toothpaste', 150, 3.00, 'Personal Care', 2),
    (25, 'Coffee Maker', 8, 120.00, 'Home and Kitchen', 3),
    (26, 'Tablet', 12, 500.00, 'Electronics', 4),
    (27, 'Dress', 30, 45.00, 'Clothing', 5),
    (28, 'Conditioner', 80, 7.00, 'Personal Care', 6),
    (29, 'Vacuum Cleaner', 10, 200.00, 'Home and Kitchen', 7),
    (30, 'Headphones', 20, 150.00, 'Electronics', 1);

-- Count the number of sales made by each customer
SELECT customer_id, COUNT(*) AS num_sales
FROM Sales
GROUP BY customer_id;

-- Retrieve the customers who made the maximum number of sales
SELECT customer_id
FROM Sales
GROUP BY customer_id
HAVING COUNT(*) = (SELECT MAX(num_sales) FROM (SELECT customer_id, COUNT(*) AS num_sales FROM Sales GROUP BY customer_id) AS subquery);

-- Retrieve all customers who have not made any sales yet
SELECT * 
FROM Customers 
WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Sales);

-- Retrieve the total revenue generated by each customer
SELECT customer_id, SUM(quantity_sold * unit_price) AS total_revenue
FROM Sales
GROUP BY customer_id;

-- Calculate and display the average number of sales per customer
SELECT AVG(num_sales) AS average_sales
FROM (SELECT customer_id, COUNT(*) AS num_sales FROM Sales GROUP BY customer_id) AS subquery;

-- Retrieve the top 5 customers with the highest total revenue
SELECT customer_id, SUM(quantity_sold * unit_price) AS total_revenue
FROM Sales
GROUP BY customer_id
ORDER BY total_revenue DESC
LIMIT 5;

-- Retrieve all customers and their associated sales, ordered by customer name
SELECT Customers.customer_id, customer_name, phone_number, sale_id, product_name, quantity_sold, unit_price, product_category
FROM Customers
LEFT JOIN Sales ON Customers.customer_id = Sales.customer_id
ORDER BY customer_name;

-- Retrieve all customers who have made more than 3 purchases
SELECT customer_id
FROM Sales
GROUP BY customer_id
HAVING COUNT(*) > 3;

-- Calculate the total quantity sold and revenue generated for each customer
SELECT customer_id, SUM(quantity_sold) AS total_quantity_sold, SUM(quantity_sold * unit_price) AS total_revenue
FROM Sales
GROUP BY customer_id;

-- Identify customers who have purchased products from multiple categories
SELECT customer_id
FROM Sales
GROUP BY customer_id
HAVING COUNT(DISTINCT product_category) > 1;
